# consider the digit halfway around the circular list. That is, if your list contains 10 items, only include a digit in your sum if the digit 10/2 = 5 steps forward matches it. Fortunately, your list has an even number of elements.

# For example:

# 1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.
# 1221 produces 0, because every comparison is between a 1 and a 2.
# 123425 produces 4, because both 2s match each other, but no other digit has a match.
# 123123 produces 12.
# 12131415 produces 4.


# This might be cheating, but I copied the original number sequence and then pasted it to the end of itself, making the sequence twice as long, but allowing for me to cycle through the entire array without hitting a nil value
sequencedigits.reverse

temp_array = []
n = 0
sequence[0..(sequence.length/2)].each do |digit|
  if sequence[n] == sequence[n + (sequence.length/4)]
    temp_array.push(digit)
    n+=1
  else
    n+=1
  end
end

temp_array.inject(:+)

